@page "/Login"
@using Fosscord.DevPortal.Classes.ResponseTypes
@using System.Net.Http.Headers
@using Blazored.LocalStorage
@using Fosscord.DevPortal.Classes
@using Fosscord.DevPortal.Classes.Extensions
@using Fosscord.DevPortal.Classes.Logic
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
<h3>Login</h3>
<div style="display: block;">
    <EditForm Model="@_loginData" OnValidSubmit="@DoLogin">
        <h1>Please sign in!</h1>
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <InputText id="email" @bind-Value="_loginData.login"/><br/>
        <InputText id="password" type="password" @bind-Value="_loginData.password"/><br/>
        <button class="btn btn-lg btn-primary btn-block" type="submit">Sign in</button>
    </EditForm>
    @if (_errorMsg != null)
    {
        <br>
        <p>@_errorMsg</p>
    }
</div>

@code {
    private LoginData _loginData = new();
    string? _errorMsg = null;
    protected override async Task OnInitializedAsync()
    {
        RuntimeStorage.AccessToken = await LocalStorage.GetItemAsStringAsync("fosscord.devportal.token");
        Console.WriteLine("Token: {0}", RuntimeStorage.AccessToken);
        if (RuntimeStorage.AccessToken is not null)
        {
            RuntimeStorage.UserInfo = await SessionLogic.GetUserInfo();
            StateHasChanged();
        }
    }

   private async Task DoLogin()
    {
        using HttpClient client = new HttpClient();
        var resp = await client.PostAsJsonAsync($"{RuntimeStorage.AppSettings.ApiUrl}/auth/login", _loginData);
        if (resp.IsSuccessStatusCode)
        {
            _errorMsg = null;
            var tokenResponse = await resp.Content.ReadFromJsonAsync<TokenResponse>();
            RuntimeStorage.AccessToken = tokenResponse.token;
            RuntimeStorage.UserInfo = await SessionLogic.GetUserInfo();
            await RuntimeStorage.SaveToLocalStorage(LocalStorage);
            StateHasChanged();
            
            NavigationManager.NavigateTo(RuntimeStorage.AppSettings.AppUrl);
        }
        else
        {
            var error = await resp.Content.ReadFromJsonAsync<ErrorResponse>();
            _errorMsg = error.ToString();
            StateHasChanged();
        }
    }

    private class LoginData
    {
        public string login { get; set; }
        public string password { get; set; }
    }

    private class TokenResponse
    {
        public string token { get; set; }
    }
}